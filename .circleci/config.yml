version: 2

aliases:
  # -------------------------
  #      ALIASES: Caches
  # -------------------------
  - &restore-deps-cache
    key: deps-cache-{{ checksum "package.json" }}

  - &save-deps-cache
    key: deps-cache-{{ checksum "package.json" }}
    paths:
      - ~/project/node_modules

  # -------------------------
  #  ALIASES: Branch Filters
  # -------------------------
  - &filter-only-master
    branches:
      only: master
  - &filter-only-semantic-pr
    branches:
      only:  /^(pull|fix|feat|dependabot)\/.*$/

defaults: &defaults
  working_directory: ~/project
  docker:
    - image: cimg/node:20.12.1

jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-deps-cache
      - run: npm install
      - run: npm test
      - save_cache: *save-deps-cache

  release:
    <<: *defaults
    docker:
      - image: cimg/python:2.7-node
    steps:
      - checkout
      - run:
          name: Install nodenv and Node.js
          command: |
            git clone https://github.com/nodenv/nodenv.git ~/.nodenv
            echo 'export PATH="$HOME/.nodenv/bin:$PATH"' >> ~/.bashrc
            echo 'eval "$(nodenv init -)"' >> ~/.bashrc
            exec $SHELL
            git clone https://github.com/nodenv/node-build.git $(nodenv root)/plugins/node-build
            nodenv install 20.12.1
            nodenv local 20.12.1
            nodenv global 20.12.1
            nodenv rehash
      # Verify Node.js version
      - run:
          name: Verify Node.js version
          command: |
            node --version
      - run: npm install
      - run: ./node_modules/.bin/semantic-release
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Deploy to S3
          command: aws s3 mv src/schema.json s3://meta.json-schema.tools/latest.json
      - run:
          name: invalidate cloudfront
          command: aws cloudfront create-invalidation --distribution-id E205UL06VEMZBZ --paths '/*'
      - save_cache: *save-deps-cache

  release_rust:
    <<: *defaults
    docker:
      - image: circleci/rust
    steps:
      - checkout
      - run: git checkout master && git fetch && git reset --hard origin/master
      - run: cargo login $CRATES_API_TOKEN
      - run: cargo publish


workflows:
  version: 2

  release:
    jobs:
      - release:
          filters: *filter-only-master
          context: sem-rel-json-schema-tools
      - release_rust:
          filters: *filter-only-master
          context: sem-rel-json-schema-tools
          requires:
            - release
